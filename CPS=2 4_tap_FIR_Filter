`timescale 1ns / 1ps
`define FIR_tap 16            //FIR_TAP
`define temporary_FIR_TAP 7   //직접 계산하여 지정해줘야함
//FIR_tap이 홀수면 temporary_FIR_TAP <= (`FIR_tap /2)  소숫점 버림;
//FIR_tap이 짝수면 temporary_FIR_TAP <= ((`FIR_tap /2) - 1);

// Resource_optimized FIR Filter임 (16_tap FIR Filter) //
//////////////////////////////////////////////////////////////////////////////////
module N_TAP_FIR_Filter(clk, rst, data_in, data_out);

input clk, rst;
input [15:0] data_in;
output [15:0] data_out;

reg [15:0] xn [7:0];
reg [15:0] prod [3:0];
reg [15:0] mac [3:0];
wire [15:0] yn;
reg [15:0] data_out;

reg [15:0] b[1:0];

//coefficient
always @ (posedge clk)
begin
	if(rst == 1)
		begin
		for(i=0; i<=1; i=i+1)
			b[i] = 0;
		end
	else
		begin
			b[0] = 16'd0003;
			b[1] = 16'd0004;
		end
end


integer i;
//xn
always @ (posedge clk)
begin
	if(rst == 1)
		begin
			for(i=0; i<=7; i=i+1)
					xn[i] = 0;
		end
	else
		begin			
			for(i=0; i<=7; i=i+1)
				if(i==0)
						begin
							xn[0] <= data_in;
						end
					else
						begin
							xn[i] <= xn[i-1];
						end
		end
end

integer j;
//prod
always @ (posedge clk)
begin
	if(rst == 1)
		begin
			for(i=0; i<=3; i=i+1)
				prod[i] = 0;
		end
	else
		begin
			prod[0] <= b[0] * (xn[1] + xn[7]);
			prod[1] <= b[1] * (xn[3] + xn[5]);
			prod[2] <= prod[0];
			prod[3] <= prod[1];
		end
end

integer k;
//mac
always @ (posedge clk)
begin
	if(rst == 1)
		begin
			for(k=0; k<=3; k=k+1)
				mac[k] = 0;
		end
	else
		begin
			mac[0] = prod[2];
			mac[1] = mac[0];
			
			mac[2] = mac[1] + prod[3];
			mac[3] = mac[2];
		end
end

assign yn = mac[3];


//data_out
always @ (posedge clk)
begin
	if(rst == 1)
		begin
			data_out[15:0] = 0;
		end
	else
		begin
			data_out <= yn[15:0];
		end
end

endmodule
